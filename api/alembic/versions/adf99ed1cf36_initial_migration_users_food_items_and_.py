"""Initial migration: users, food_items, and pantry_items

Revision ID: adf99ed1cf36
Revises: 
Create Date: 2025-10-26 14:51:41.648654

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'adf99ed1cf36'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('food_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('brand', sa.String(length=255), nullable=True),
    sa.Column('serving_size', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('serving_unit', sa.String(length=50), nullable=False),
    sa.Column('calories', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('protein_g', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('carbs_g', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('fat_g', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('saturated_fat_g', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('trans_fat_g', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('cholesterol_mg', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('sodium_mg', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('fiber_g', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('sugar_g', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('vitamin_a_mcg', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('vitamin_c_mg', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('calcium_mg', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('iron_mg', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('cost_per_serving', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('calcium_mg >= 0 OR calcium_mg IS NULL', name='check_calcium_non_negative'),
    sa.CheckConstraint('calories >= 0 OR calories IS NULL', name='check_calories_non_negative'),
    sa.CheckConstraint('carbs_g >= 0 OR carbs_g IS NULL', name='check_carbs_non_negative'),
    sa.CheckConstraint('cholesterol_mg >= 0 OR cholesterol_mg IS NULL', name='check_cholesterol_non_negative'),
    sa.CheckConstraint('cost_per_serving >= 0 OR cost_per_serving IS NULL', name='check_cost_non_negative'),
    sa.CheckConstraint('fat_g >= 0 OR fat_g IS NULL', name='check_fat_non_negative'),
    sa.CheckConstraint('fiber_g >= 0 OR fiber_g IS NULL', name='check_fiber_non_negative'),
    sa.CheckConstraint('iron_mg >= 0 OR iron_mg IS NULL', name='check_iron_non_negative'),
    sa.CheckConstraint('protein_g >= 0 OR protein_g IS NULL', name='check_protein_non_negative'),
    sa.CheckConstraint('saturated_fat_g >= 0 OR saturated_fat_g IS NULL', name='check_saturated_fat_non_negative'),
    sa.CheckConstraint('serving_size > 0', name='check_serving_size_positive'),
    sa.CheckConstraint('sodium_mg >= 0 OR sodium_mg IS NULL', name='check_sodium_non_negative'),
    sa.CheckConstraint('sugar_g >= 0 OR sugar_g IS NULL', name='check_sugar_non_negative'),
    sa.CheckConstraint('trans_fat_g >= 0 OR trans_fat_g IS NULL', name='check_trans_fat_non_negative'),
    sa.CheckConstraint('vitamin_a_mcg >= 0 OR vitamin_a_mcg IS NULL', name='check_vitamin_a_non_negative'),
    sa.CheckConstraint('vitamin_c_mg >= 0 OR vitamin_c_mg IS NULL', name='check_vitamin_c_non_negative'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_food_items_id'), 'food_items', ['id'], unique=False)
    op.create_index(op.f('ix_food_items_user_id'), 'food_items', ['user_id'], unique=False)
    op.create_table('pantry_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('food_item_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=False),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('quantity >= 0', name='check_pantry_quantity_non_negative'),
    sa.ForeignKeyConstraint(['food_item_id'], ['food_items.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'food_item_id', name='uq_user_food_item')
    )
    op.create_index(op.f('ix_pantry_items_food_item_id'), 'pantry_items', ['food_item_id'], unique=False)
    op.create_index(op.f('ix_pantry_items_id'), 'pantry_items', ['id'], unique=False)
    op.create_index(op.f('ix_pantry_items_user_id'), 'pantry_items', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_pantry_items_user_id'), table_name='pantry_items')
    op.drop_index(op.f('ix_pantry_items_id'), table_name='pantry_items')
    op.drop_index(op.f('ix_pantry_items_food_item_id'), table_name='pantry_items')
    op.drop_table('pantry_items')
    op.drop_index(op.f('ix_food_items_user_id'), table_name='food_items')
    op.drop_index(op.f('ix_food_items_id'), table_name='food_items')
    op.drop_table('food_items')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
